==== Intro ====

* Git-Workflows?

--1cm--

* Folge von Kommandos
* Nutzung von Branches und Tags

==== Was für Workflows? ====

* ''push'n'pull''
* ''push'n'pull mit rebase''
* ''github-workflow''
* ''rebase'n'force-merge''
* ''gitflow''

==== Push'n'pull Workflow ====

<[center]
<<<images/push-pull.pdf, scale=0.15>>>
[center]>

\begin{enumerate}
<[columns]
[[[ 5cm ]]]
\item Lokale Änderungen
* @vim ''datei''@
* @git add ''datei''@
* @git commit -m "''msg''"@
[[[ 5.5cm ]]]
\item Änderungen veröffentlichen
* @git push@
* Wenn @push@ fehlschlägt
* @git pull@, dann @git push@
% ** @git pull@
% ** @git push@
[columns]>
\end{enumerate}

==== Push'n'pull Workflow -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-result.pdf, scale=0.25>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Leicht für Anfänger
** Nur weniger Kommandos
--1cm--
* Nachteile
** Es entstehen Merge-Commits
** »Aber wir arbeiten doch alle auf @master@?\!«
** Rebase ist eine Option (für Anfänger?)
[columns]>

==== Push'n'pull Workflow -- Resultat mit @-{}-rebase@ ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-rebase-result.pdf, scale=0.25>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Keine Merge-Commits
--1cm--
* Nachteile
** »Sinnloses« Linearisieren
** Feature-Commits in zufälliger Reihenfolge
** Konflikte beim Rebase?
[columns]>

==== Interlude: Darstellung von Git-Graphen ====

* Bei mir:
** Zeit läuft von unten nach oben
** Wie bei Gitk, Eclipse, SourceTree etc...

* Aber:
** Mehrere Commits auf einer Zeile \\ (vereinfacht die Darstellung)
** Bei Gitk, Eclipse, SourceTree ist das nicht so..

==== Github-Flow ====

* Geeignet für Github
* Webinterface oder 'github' Kommandozeilenerweiterung
* Nutzt Feature-Branches

==== Github-Flow ====

<[center]
<<<images/githubflow.pdf, scale=0.25>>>
[center]>

\begin{enumerate}
<[columns]
[[[ 5.5cm ]]]
'''Entwickler''': \\
\item forkt ein Repository \\
\item klont seinen Fork und macht Commits in einem Feature-Branch \\
\item pusht den Feature-Branch in seinen Fork \\
\item eröffnet einen Pull-Request \\
[[[ 5.5cm ]]]
'''Autor''': \\
\item fetcht den Feature-Branch und mergt ihn \\
\item pusht ins Original \\
\item '''oder''': mergt den Pull-Request über das Webinterface \\
[columns]>
\end{enumerate}

==== Github-Flow -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/githubflow-resultat.pdf, scale=0.20>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Feature-Branches
--1cm--
* Nachteile
** Feature-Branches basieren vor dem Merge evtl. nicht auf dem aktuellen Master
** »Durcheinander«
[columns]>

==== Github-Flow -- Anmerkungen ====

* Beim Merge von Pull-Requests wird der Merge-Commit automatisch forciert
* Weitere Schritte vom Entwickler nötig
** --> Feature-Branches löschen
** --> Synchronisation vom @master@ im Fork mit @master@ aus Original

==== Rebase 'n' Force-Merge Workflow ====

<[center]
<<<images/rebase-force.pdf, scale=0.17>>>
[center]>

==== Beschreibung der Schritte ====

<[columns]
[[[ 6.5cm ]]]
\begin{enumerate}
\item '''Repository clonen:'''\\
    @git clone <url>@
\item '''Feature-Branch anlegen'''\\
    @git checkout -b feature@
\item '''Arbeiten:'''\\
    @vim datei@\\
    @git add datei@\\
    @git commit -m "<msg>"@
\item '''Getane Arbeit hochladen'''\\
    @\# beim ersten Mal@\\
    @git push origin -u feature@\\
    @git push@
\item '''Lokalen @master@ aktualisieren:'''\\
    @git checkout master@\\
    @git pull@
\end{enumerate}
[[[ 6.5cm ]]]
\begin{enumerate}
\setcounter{enumi}{5}
\item '''Rebase @feature@ auf @master@:'''\\
    @git checkout feature@\\
    @git rebase master@
\item '''Forcierter Merge von @feature@:'''\\
    @git checkout master@\\
    @git merge -{}-no-ff feature@
\item '''@master@  Hochladen:'''\\
    @git push@
\item '''Fehlschlag: Merge rückgängig:'''\\
    @git reset -{}-hard HEAD\^@\\
\item '''Erfolg: @feature@ löschen,\\lokal und remote:'''\\
    @git branch -d feature@\\
    @git push origin --delete feature@
\end{enumerate}
[columns]>

==== Rebase 'n' Force-Merge -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/rebase-n-force-result.pdf, scale=0.16>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Saubere history
** Feature-Branches
** Merges sinnvoll
--1cm--
* Nachteile
** Verständnis von Git gebraucht
** Mehrere Kommandos nötig
[columns]>

==== Rebase 'n' Force-Merge -- Anmerkungen ====

* Kann auch im Github-Flow verwendet werden
** --> Feature-Branches vor dem Merge des Pull-Request per Force-Push aktualisieren
** --> Beim Merge von Pull-Requests wird der Merge-Commit automatisch forciert

==== Gitflow ====

* Großflächiges Branch-Modell

--0.5cm--

* Branches
** @master@ --> Stabil/Produktion
** @develop@ --> Instabil/Vorbereitung
** @feature@ --> Feature-Entwicklung
** @release@ --> Letzte Releasearbeiten
** @hotfix@ --> Hotfixes

==== Gitflow ====

<[center]
<<<images/gitflow.pdf, scale=0.09>>>
[center]>

==== Gitflow -- @master@ und @develop@ ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/gitflow-master-develop.pdf, scale=0.16>>>
[center]>
[[[ 7cm ]]]
* Zwei langlebige Branches
** @master@ --> Stabil/Produktion
** @develop@ --> Instabil/Vorbereitung
[columns]>


==== Manpage: Gitworflows ====

TODO

==== Gerrit Workflow ====

TODO
